import os
import sass
import weasyprint
from weasyprint import HTML, CSS
from weasyprint.text.fonts import FontConfiguration
from django.template import loader
from django.conf import settings
from django.template.loader import render_to_string
from apps.reporting.variants.base import Variant
from apps.reporting import utils


class PentestReport(Variant):
    CSS = []

    # Generate a PentestReport as PDF with weasyprint
    def __init__(self, report_release, template_name=None, vulnerability=None):
        super().__init__(report_release, template_name=template_name, vulnerability=vulnerability)
        report_template = loader.get_template("report_templates/%s/%s" % (self.template_name, self.get_filename()))
        self.template_root_path = report_template.origin.name.replace(self.get_filename(), "")

    def get_css(self):
        return self.CSS.copy()

    def get_filename(self):
        if self.vulnerability:
            return "exported_vulnerability.html"
        return "report.html"

    def get_stylesheets(self):
        css_paths = []
        for css in self.get_css():
            new_css_path = os.path.join(self.template_root_path, css)
            css_paths.append(
                new_css_path
            )
        # append sass files
        sass_path = os.path.join(self.template_root_path, "scss/main.scss")
        if os.path.exists(sass_path):
            compiled_scss = sass.compile(filename=sass_path, output_style="compressed")
            css_paths.append(CSS(string=compiled_scss))
        return css_paths

    def url_fetcher(self, url, *args, **kwargs):
        if url.startswith('file:'):
            media_name = url.replace("file://", "")
            media_path = os.path.join(self.template_root_path, media_name)
            return dict(file_obj=open(media_path, "rb"))

        return weasyprint.default_url_fetcher(url, *args, **kwargs)

    def get_context(self):
        context = super().get_context()
        context["REPORT_COMPANY_INFORMATION"] = settings.REPORT_COMPANY_INFORMATION
        if self.vulnerability:
            context["vulnerability"] = self.vulnerability
            context["report_errors"] = self.get_errors()
        return context

    def generate_report(self):
        jinja_template = "report_templates/" + self.template_name + "/%s" % self.get_filename()
        raw_source = render_to_string(jinja_template, self.get_context())

        font_config = FontConfiguration()
        compiled_source = HTML(string=raw_source, url_fetcher=self.url_fetcher).write_pdf(
            stylesheets=self.get_stylesheets(),
            font_config=font_config)
        return raw_source, compiled_source

    def get_errors(self):
        return utils.get_report_errors(self.report_release)
