from django.test import TestCase
from vulnman.core.test import VulnmanTestCaseMixin
from apps.responsible_disc import models


class VulnerabilityProofsTestCase(TestCase, VulnmanTestCaseMixin):
    def setUp(self) -> None:
        self.init_mixin()
        self.vulnerability1 = self.create_instance(models.Vulnerability, user=self.pentester1)
        self.vulnerability2 = self.create_instance(models.Vulnerability, user=self.pentester1)
        self.proof1 = self.create_instance(models.TextProof, vulnerability=self.vulnerability1)
        self.proof2 = self.create_instance(models.TextProof, vulnerability=self.vulnerability2)
        self.url = self.get_url("responsible_disc:vulnerability-proofs", pk=self.vulnerability1.pk)

    def test_valid(self):
        self.client.force_login(self.pentester1)
        response = self.client.get(self.url)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.context["vuln"], self.vulnerability1)

    def test_vendor_unshared(self):
        self.client.force_login(self.vendor)
        response = self.client.get(self.url)
        self.assertEqual(response.status_code, 403)

    def test_vendor_shared(self):
        # TODO: implement me
        pass

    def test_pentester2(self):
        self.client.force_login(self.pentester2)
        response = self.client.get(self.url)
        self.assertEqual(response.status_code, 403)


class VulnerabilityTimelineTestCase(TestCase, VulnmanTestCaseMixin):
    def setUp(self) -> None:
        self.init_mixin()
        self.vulnerability1 = self.create_instance(models.Vulnerability, user=self.pentester1)
        self.vulnerability2 = self.create_instance(models.Vulnerability, user=self.pentester1)
        self.proof1 = self.create_instance(models.TextProof, vulnerability=self.vulnerability1)
        self.proof2 = self.create_instance(models.TextProof, vulnerability=self.vulnerability2)
        self.url = self.get_url("responsible_disc:vulnerability-timeline", pk=self.vulnerability1.pk)

    def test_valid(self):
        self.client.force_login(self.pentester1)
        response = self.client.get(self.url)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.context["vuln"], self.vulnerability1)

    def test_vendor_unshared(self):
        self.client.force_login(self.vendor)
        response = self.client.get(self.url)
        self.assertEqual(response.status_code, 403)

    def test_vendor_shared(self):
        # TODO: implement me
        pass

    def test_pentester2(self):
        self.client.force_login(self.pentester2)
        response = self.client.get(self.url)
        self.assertEqual(response.status_code, 403)


class VulnerabilityManageAccessTestCase(TestCase, VulnmanTestCaseMixin):
    def setUp(self) -> None:
        self.init_mixin()
        self.vulnerability1 = self.create_instance(models.Vulnerability, user=self.pentester1)
        self.vulnerability2 = self.create_instance(models.Vulnerability, user=self.pentester1)
        self.proof1 = self.create_instance(models.TextProof, vulnerability=self.vulnerability1)
        self.proof2 = self.create_instance(models.TextProof, vulnerability=self.vulnerability2)
        self.url = self.get_url("responsible_disc:manage-access", pk=self.vulnerability1.pk)

    def test_valid(self):
        self.client.force_login(self.pentester1)
        response = self.client.get(self.url)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(len(response.context["users"]), 1)
        self.assertEqual(response.context["users"][0], self.pentester1)

    def test_vendor_unshared(self):
        self.client.force_login(self.vendor)
        response = self.client.get(self.url)
        self.assertEqual(response.status_code, 403)

    def test_vendor_shared(self):
        # TODO: implement me
        pass

    def test_pentester2(self):
        self.client.force_login(self.pentester2)
        response = self.client.get(self.url)
        self.assertEqual(response.status_code, 403)


class VulnerabilityCommentsTestCase(TestCase, VulnmanTestCaseMixin):
    def setUp(self) -> None:
        self.init_mixin()
        self.vulnerability1 = self.create_instance(models.Vulnerability, user=self.pentester1)
        self.vulnerability2 = self.create_instance(models.Vulnerability, user=self.pentester1)
        self.comment1 = self.create_instance(models.VulnerabilityComment, vulnerability=self.vulnerability1)
        self.comment2 = self.create_instance(models.VulnerabilityComment, vulnerability=self.vulnerability2)
        self.url = self.get_url("responsible_disc:comment-list", pk=self.vulnerability1.pk)

    def test_valid(self):
        self.client.force_login(self.pentester1)
        response = self.client.get(self.url)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(len(response.context["comments"]), 1)
        self.assertEqual(response.context["comments"][0], self.comment1)

    def test_vendor_unshared(self):
        self.client.force_login(self.vendor)
        response = self.client.get(self.url)
        self.assertEqual(response.status_code, 403)

    def test_vendor_shared(self):
        # TODO: implement me
        pass

    def test_pentester2(self):
        self.client.force_login(self.pentester2)
        response = self.client.get(self.url)
        self.assertEqual(response.status_code, 403)
