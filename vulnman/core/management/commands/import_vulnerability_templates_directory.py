import sys
import warnings
import yaml
import os
from pathlib import Path
from django.conf import settings
from django.core.management.base import BaseCommand
from apps.findings import models


class Command(BaseCommand):
    help = 'Import vulnerability templates from file'
    counter_created_t = 0
    counter_updated_t = 0

    def add_arguments(self, parser):
        parser.add_argument('path')

    def handle(self, *args, **options):
        template_dir = options["path"]
        self.import_categories(template_dir)
        for path in Path(template_dir).rglob('info.yaml'):
            if "_template/info.yaml" in str(path):
                continue
            self._import_file(path)
        self.stdout.write(self.style.SUCCESS(
            "Successfully imported templates! Created: {created}, Updated: {updated}".format(
                created=self.counter_created_t, updated=self.counter_updated_t)
        ))

    def import_categories(self, template_dir):
        """ import category information from file
        """
        counter_created = 0
        counter_updated = 0
        for category_path in Path(template_dir).rglob('categories.yaml'):
            with open(category_path, "r") as f:
                category_ids = []
                for key, value in yaml.safe_load(f).items():
                    default_values = {}
                    for lang in settings.LANGUAGES:
                        if value["locale"].get(lang):
                            default_values["display_name_%s"] = value["locale"][lang]["name"]
                    default_values["display_name"] = value["locale"]["en"]["name"]
                    _obj, created = models.VulnerabilityCategory.objects.update_or_create(
                        name=key, defaults=default_values)
                    category_ids.append(key)
                    if created:
                        counter_created += 1
                    else:
                        counter_updated += 1
                # delete old categories
                # TODO: add purge command argument
                # models.VulnerabilityCategory.objects.filter(~Q(name__in=category_ids)).delete()
        self.stdout.write(self.style.SUCCESS(
            "Successfully imported categories! Created: {created}, Updated: {updated}".format(
                created=counter_created, updated=counter_updated)
        ))

    def _get_description(self, filename, language):
        # read description of a template by its locale
        desc_filename = str(filename).replace("info.yaml", "locale/%s/description.md" % language)
        if not os.path.exists(desc_filename):
            return sys.stdout.write("No such locale '%s' skipping description..." % language)
        with open(desc_filename, "r") as f:
            return f.read()

    def _get_recommendation(self, filename, language):
        desc_filename = str(filename).replace("info.yaml", "locale/%s/recommendation.md" % language)
        if not os.path.exists(desc_filename):
            return sys.stdout.write("No such locale '%s' skipping recommendation..." % language)
        with open(desc_filename, "r") as f:
            return f.read()

    def _severity_to_choice(self, severity_str):
        for item in models.Vulnerability.SEVERITY_CHOICES:
            if item[1] == severity_str.capitalize():
                return item[0]
        raise Exception("Invalid severity")

    def _import_file(self, filename):
        with open(filename, "r") as f:
            for item in yaml.safe_load(f):
                default_values = {}
                for lang in settings.LANGUAGES:
                    description = self._get_description(filename, lang[0])
                    recommendation = self._get_recommendation(filename, lang[0])
                    default_values["description_%s" % lang[0]] = description
                    default_values["recommendation_%s" % lang[0]] = recommendation
                    if not item.get("locale"):
                        warnings.warn("Template %s does seem to use an old structure which is not supported anymore" %
                                      item["id"])
                        continue
                    default_values["name_%s" % lang[0]] = item["locale"][lang[0]]["name"]
                default_values["severity"] = self._severity_to_choice(item["severity"])
                template, created = models.Template.objects.update_or_create(
                    vulnerability_id=item["id"], defaults=default_values)
                try:
                    category = models.VulnerabilityCategory.objects.get(name=item["category"])
                except models.VulnerabilityCategory.DoesNotExist:
                    print(item["category"])
                    raise models.VulnerabilityCategory.DoesNotExist
                template.category = category
                template.save()
                for cwe_entry in item.get("cwe", []):
                    entry, _entry_created = models.CWEEntry.objects.update_or_create(entry=cwe_entry)
                    template.cwe_ids.add(entry)
                for reference in item.get('references', []):
                    ref, _created = models.Reference.objects.update_or_create(
                        template=template, name=reference)
                if created:
                    self.counter_created_t += 1
                else:
                    self.counter_updated_t += 1

