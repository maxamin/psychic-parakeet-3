package ru.nsu.xwaf.cli;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.Iterator;
import java.util.Vector;

/**
 * How to use class URL.
 * <p> 
 * Need to have next methods:
 * URLHandler(String url);
 * public URL setParam(String paramName, String what);  // get new URL with replaced parameter
 *  setParam("id", "' SLEEP(10) --");
 *  use String.replace
 * boolean hasNext();   true if have next param
 * String next();  return name of next param
 * // CamelCase
 */
public class URLHandler implements Iterable < String >   // changed Iterator into Iterable
{
    // TODO get rid from NullPointerException if query is null
    private URL url;
    private Vector < String > queryList = new Vector<String>(); // must create Vector before use

    /**
     * Constucts new URLHandler object
     * @param urlStr URL for handling
     * @throws MalformedURLException if no protocol is specified, or an unknown protocol is found
     */
    URLHandler(String urlStr) throws MalformedURLException
    {
        url = new URL(urlStr);
        String query = url.getQuery();
        String[] querySplit = query.split( "&|;" );
        for (String aQuerySplit : querySplit) {              // changed into foreach
            queryList.add(aQuerySplit.split("=")[0]);
        }
        /*catch ( MalformedURLException e )
        {
            System.out.println( "Error! I can't make URL Object! :(" );
        }   It's better throw inception further */
    }

    /**
     * Changes one of parameters of URL query
     * @param what parameter to changing
     * @param substitute new value of URL parameter
     * @return new constructed URL
     * @throws MalformedURLException if no protocol is specified, or an unknown protocol is found
     */
    public URL setParam( String what, String substitute ) throws MalformedURLException
    {
		String[] partQuery = url.getQuery().split( "=|;|&");
		String resultString = "";
		
		int i = 0;
		boolean flag = true;
		while( i < partQuery.length && flag )
		{
			if( partQuery[i].compareTo(what) == 0 )
			{
				resultString += what + '=' + partQuery[i + 1] + substitute;
				if( i + 1 != partQuery.length - 1 )
					resultString += '&';
				flag = false;
			}
			else
			{
				resultString += partQuery[i] + '=' + partQuery[i + 1] + '&';
			}
			i += 2;
		}
		
		for( ; i < partQuery.length; i += 2 )
		{
			resultString += partQuery[i] + '=' + partQuery[i + 1];
			if( i + 1 != partQuery.length - 1 ) 
				 resultString += '&';
		}
		
		return new URL(url.getProtocol() + "://" + url.getHost() + url.getPath() + '?' + resultString);
    }

    /**
     * Gets new iterator on query parameters
     * @return new iterator
     */
    public Iterator <String> iterator() {
        return queryList.iterator();
    }

}

