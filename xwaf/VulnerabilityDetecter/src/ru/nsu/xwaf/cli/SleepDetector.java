package ru.nsu.xwaf.cli;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Scanner;

/**
 * Detector which uses SLEEP as SQL-Injection.
 */
public class SleepDetector implements Detector {

    private Scanner sleepVariants = null;

    /**
     * Constructs new SleepDetector
     *
     * @param sleepFilePath Path to file contains variants SLEEP injection
     */
    public SleepDetector(String sleepFilePath) {
        sleepVariants = new Scanner(this.getClass().getResourceAsStream(sleepFilePath));
    }

    private URLHandler handler = null;
    private PrintStream outStream = null;

    /**
     * Initializes current detector by {@link String} contains URL path
     *
     * @param url {@link String} contains URL path.
     * @param outStream {@link java.io.OutputStream in which is written results of test}
     * @throws MalformedURLException URL loading was failed.
     */
    public void init(String url, OutputStream outStream) throws MalformedURLException {
        handler = new URLHandler(url);
        this.outStream = new PrintStream(outStream);
    }


    /**
     * Runs current vulnerability test.
     */
    public void test(){

        while(sleepVariants.hasNext()) {       // try all variants of substitute sleep from sleeps.txt

            String substitute = sleepVariants.nextLine();
            for (Renamer.RenamerOption opt : Renamer.RenamerOption.values()) {

                String substituteRenamed = Renamer.rename(substitute, opt);   // try all rename variants
                for (String param : handler) {
                    try {
                        URL substUrl = handler.setParam(param, substituteRenamed);
                        new Thread(new URLTest(substUrl, param)).start();            // create new thread
                    }
                    catch (MalformedURLException e) {     // it is abnormal because default URL creates ok
                        outStream.println(e.getMessage());
                    }
                }
            }

        }
    }

    private final long SLEEP_TIME = 15000;  // sleep time in milliseconds

    /**
     * Class which is run in separate thread. It tries to open URL with SQL-injection (SLEEP) and
     * determines URL has vulnerability or hasn't.
     *
     */
    private class URLTest implements Runnable {         // concrete test go in separate thread
        
        private URL url = null;
        private String parameter = null;
        private Extractor extractor = new Extractor();

        URLTest(URL url, String parameter) {
            this.url = url;
            this.parameter = parameter;
        }

        public void run() {
            long timeBeforeOpen = System.currentTimeMillis();
            extractor.getPage(url);
            if (timeBeforeOpen + SLEEP_TIME < System.currentTimeMillis()) {
                outStream.println("Found SLEEP vulnerability on parameter \"" + parameter + "\" by follow link:" +
                        System.lineSeparator() + url.toString());
            }
            // there is no vulnerability
        }
    }
}
