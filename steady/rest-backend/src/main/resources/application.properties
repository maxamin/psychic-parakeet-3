#
# This file is part of Eclipse Steady.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: Copyright (c) 2018-2020 SAP SE or an SAP affiliate company and Eclipse Steady contributors
#

#spring.jpa.generate-ddl = false
#spring.jpa.properties.org.hibernate.SQL = true

#debug=true
# configurations usefull to create sql creation script
# create sql in console and log in console at runtime
#spring.jpa.show-sql=true
# create sql in file (will be created in the project root)
#spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=create.sql

#configuration to log sql generated to update schema
#logging.level.org.hibernate.tool.hbm2ddl=DEBUG


#As of Spring 1.4, hibernate is update to 5.x. In hibernate 5.x the naming strategy is refined and splitted into the 
#implicitNamingStrategy and PhysicalNamingStrategy. Spring implemented the implicitNamingStrategy interface in such a way to obtain 
#ALMOST the same naming used in spring 1.3.x. 
#The configurations below are hibernate specific but we decided to still rely on the spring one which is a light modification of the default hibernate
#implicit strategy. The issues we faced in the update are handled at the db schema with a flyway migration (20170824).
#spring.jpa.properties.hibernate.implicit_naming_strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl
#spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl 


#info.app.name=Spring Sample Application
#As of spring 1.5.x security have been added to provide authentication by default to all sensitive endpoints. Most of the actuator endpoints are sensitive 
#the /info endpoint is NOT sensitive
#To make all endpoints public again set the following config to false. For a more finegrained security configuration, use spring security.
#management.security.enabled=false
#security.basic.enabled=false

spring.jpa.hibernate.ddl-auto=validate
#validate | update | create | create-drop

server.port = 8091
server.servlet.contextPath=/backend
spring.profiles.active=docker

#flyway.placeholderPrefix=${
spring.flyway.placeholder-replacement= false
spring.flyway.skipDefaultCallbacks=true

# Settings for Actuator trace
#
# See
#   https://github.com/spring-projects/spring-boot/blob/v1.5.2.RELEASE/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/TraceProperties.java
#   https://www.dontpanicblog.co.uk/2017/04/14/spring-boot-actuator-trace/
#spring.jackson.date-format=yyyy-MM-dd HH:mm:ss
# in spring 1.5.x config was management.trace.include=REQUEST_HEADERS, RESPONSE_HEADERS, ERRORS, QUERY_STRING
# spring 2.x enums valid values:  AUTHORIZATION_HEADER,COOKIE_HEADERS,PRINCIPAL,REMOTE_ADDRESS,REQUEST_HEADERS,RESPONSE_HEADERS,SESSION_ID,TIME_TAKEN
management.trace.http.include=REQUEST_HEADERS,RESPONSE_HEADERS

#Flyway changed its default for flyway.table in version 5.0.0 to flyway_schema_history and you are still relying on the old default (schema_version). Set flyway.table=schema_version in your configuration to fix this. This fallback mechanism will be removed in Flyway 6.0.0. 
spring.flyway.table=schema_version

#since spring 2.x we use Hikari jdbc as springboot changed its default (previously tomcat jdbc)
#spring.datasource.type=org.apache.tomcat.jdbc.pool.DataSource
# setting max size of connection pool to the default previously used by tomcat JDBC
spring.datasource.hikari.maximum-pool-size=50
#minimum number of idle connections that HikariCP tries to maintain in the pool. Default: same as maximumPoolSize (see https://github.com/brettwooldridge/HikariCP#gear-configuration-knobs-baby)
#spring.datasource.hikari.minimum-idle

# In Spring 2 the following propert changed the default from false to true (https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.0-Migration-Guide#id-generator). 
# When "true" the performances of our Junit tests gets considerably bad. Moreover it is reported to create incompatibilities with existing keys that needs to be addressed with migrations (to be investigated)
spring.jpa.hibernate.use-new-id-generator-mappings=false