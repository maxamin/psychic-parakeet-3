global
    maxconn 2048
    stats socket /var/run/haproxy.sock mode 600 level admin

defaults
    mode http
    option forwardfor
    option http-server-close
    
    timeout connect 5s
    timeout client 60m 
    timeout server 60m

    # keep server status after reloading
    load-server-state-from-file global
    stats auth "${HAPROXY_STATS_USER}:${HAPROXY_STATS_PASSWORD}"
    default-server init-addr none

userlist VulasAdmin
    user "${FRONTEND_BUGS_USER}" insecure-password "${FRONTEND_BUGS_PASSWORD}"

resolvers docker_resolver
    nameserver dns 127.0.0.11:53

frontend http-in
    bind *:8080
    
    log global

    compression algo gzip

    acl is_blue  dst_port 8080 
    
    acl valid_token req.hdr(X-Vulas-Client-Token) -m str "${BACKEND_BUGS_TOKEN}"
    acl valid_http_method method POST PUT
    acl valid_path path_beg -i  /backend/bugs
    acl is_valid_component req.hdr(X-Vulas-Component) -m str client
    acl is_valid_source_param url_param(source) -m str CHECK_CODE
    http-request deny if valid_path valid_http_method !valid_token !is_valid_component OR valid_path valid_http_method !valid_token !is_valid_source_param
    
    acl is_backend path_beg -i /backend
    acl is_cia path_beg -i /cia
    acl is_bugs_admin path_beg -i /bugs
    acl is_frontend path_beg -i /apps
    acl to_be_cached_long_term urlp_reg(lastChange) ^[0-9]{13}$
    acl cache_long_term_available nbsrv(cache-long-term-nodes) ge 1

    use_backend cache-long-term-nodes if to_be_cached_long_term cache_long_term_available
    use_backend rest-backend-nodes if is_backend
    use_backend rest-lib-utils-nodes if is_cia
    use_backend frontend-bugs-nodes if is_bugs_admin
    use_backend frontend-apps-nodes if is_frontend

backend frontend-apps-nodes
    mode 	http
    balance 	roundrobin
    option 	forwardfor
    http-request set-header X-Forwarded-Port %[dst_port]
    option httpchk GET /apps/ HTTP/1.1\r\nHost:\ haproxy01
    http-check expect ! rstatus ^5
    stats 	enable
    server 	frontend-apps frontend-apps:8080 check resolvers docker_resolver resolve-prefer ipv4

backend rest-lib-utils-nodes
    mode 	http
    log 	global
    balance 	roundrobin
    option 	forwardfor
    http-request set-header X-Forwarded-Port %[dst_port]
    option httpchk GET /cia/ HTTP/1.1\r\nHost:\ haproxy01
    http-check expect ! rstatus ^5
    stats enable
    server rest-lib-utils rest-lib-utils:8092 check resolvers docker_resolver resolve-prefer ipv4

backend rest-backend-nodes
    mode http
    log global
    balance roundrobin
    option forwardfor
    http-request set-header X-Forwarded-Port %[dst_port]
    option httpchk GET /backend/ HTTP/1.1\r\nHost:\ haproxy01
    http-check expect ! rstatus ^5
    stats enable
    server rest-backend rest-backend:8091 check resolvers docker_resolver resolve-prefer ipv4

backend frontend-bugs-nodes
    mode http
    log global
    balance roundrobin
    option forwardfor
    http-request set-header X-Forwarded-Port %[dst_port]
    option httpchk GET /bugs/ HTTP/1.1\r\nHost:\ haproxy01
    http-check expect ! rstatus ^5
    stats enable
    server frontend-bugs frontend-bugs:8080 check resolvers docker_resolver resolve-prefer ipv4
    acl AuthOkay http_auth(VulasAdmin)
    http-request auth realm Vulas if !AuthOkay

backend cache-long-term-nodes
    mode http
    log global
    balance leastconn
    http-request set-header XBackend rest-backend:8091
    option httpchk GET /backend/health/ HTTP/1.1\r\nHost:\ haproxy01\r\nXBackend:\ rest-backend:8091
    http-check expect ! rstatus ^5
    stats enable
    server cache-long-term cache:80 check resolvers docker_resolver resolve-prefer ipv4
