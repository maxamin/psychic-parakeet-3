/*
 * Copyright 2015-2019 Josh Cummings
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.joshcummings.codeplay.terracotta.app;

import com.fasterxml.jackson.annotation.JsonRootName;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.joshcummings.codeplay.terracotta.AbstractEmbeddedTomcatTest;
import okhttp3.mockwebserver.Dispatcher;
import okhttp3.mockwebserver.MockResponse;
import okhttp3.mockwebserver.MockWebServer;
import okhttp3.mockwebserver.RecordedRequest;
import org.apache.commons.io.IOUtils;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.entity.BasicHttpEntity;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SealedObject;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.NotSerializableException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.lang.reflect.Field;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.Signature;
import java.security.SignedObject;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

import static org.apache.http.client.methods.RequestBuilder.post;
import static org.testng.Assert.*;

public class ContentParsingFilterVTests extends AbstractEmbeddedTomcatTest {
	private MockWebServer evil;

	@BeforeMethod
	public void mockWebServer() {
		this.evil = new MockWebServer();
	}

	@Test
	public void testGeneralEntityXxe() throws Exception {
		BasicHttpEntity body = new BasicHttpEntity();
		body.setContent(xml("xxe/generalentity.xml"));
		try (CloseableHttpResponse response = this.http.post(post("/login")
				.setHeader("Content-Type", "application/xml")
				.setEntity(body))) {
			byte[] output = IOUtils.toByteArray(response.getEntity().getContent());
			assertFalse(new String(output).contains("1o2neo12ieno"),
					"Exposed secret through general entity XXE");
		}
	}

	@Test
	public void testXincludeXxe() throws Exception {
		BasicHttpEntity body = new BasicHttpEntity();
		body.setContent(xml("xxe/xinclude.xml"));
		try (CloseableHttpResponse response = this.http.post(post("/login")
				.setHeader("Content-Type", "application/xml")
				.setEntity(body))) {
			byte[] output = IOUtils.toByteArray(response.getEntity().getContent());
			assertFalse(new String(output).contains("1o2neo12ieno"),
					"Exposed secret through XInclude XXE");
		}
	}

	@Test
	public void testParameterEntityXxe() throws Exception {
		try ( MockWebServer server = this.evil) {
			DispatchRecorder recorder = new DispatchRecorder();
			server.setDispatcher(recorder);
			server.start();
			BasicHttpEntity body = new BasicHttpEntity();
			body.setContent(port(xml("xxe/parameterentity.xml"), server.getPort()));
			try (CloseableHttpResponse response = this.http.post(post("/login")
					.setHeader("Content-Type", "application/xml")
					.setEntity(body))) {
				byte[] output = IOUtils.toByteArray(response.getEntity().getContent());
				assertFalse(new String(output).contains("1o2neo12ieno"),
						"Exposed secret through Parameter Entity XXE");
				recorder.assertNoRequests();
			}
		}
	}

	@Test
	public void testExfiltrationXxe() throws Exception {
		try ( MockWebServer server = this.evil) {
			DispatchRecorder recorder = new DispatchRecorder();
			server.setDispatcher(recorder);
			server.start();
			BasicHttpEntity body = new BasicHttpEntity();
			body.setContent(port(xml("xxe/exfiltration.xml"), server.getPort()));
			try (CloseableHttpResponse response = this.http.post(post("/login")
					.setHeader("Content-Type", "application/xml")
					.setEntity(body))) {
				recorder.assertDoesNotHaveSecret();
				recorder.assertNoRequests();
			}
		}
	}

	// This test will launch "calc.exe" on your local machine
	@Test(enabled = false)
	public void testJsonRce() throws IOException {
		BasicHttpEntity body = new BasicHttpEntity();
		body.setContent(xml("serialization/rce.json"));
		try (CloseableHttpResponse response = this.http.post(post("/login")
				.setHeader("Content-Type", "application/json")
				.setEntity(body))) {

		}
	}

	// This test will launch "calc.exe" on your local machine
	@Test(enabled = false)
	public void testJavaRce() throws IOException {
		try (InputStream payload = xml("serialization/rce.out")) {
			BasicHttpEntity body = new BasicHttpEntity();
			body.setContent(payload);
			try (CloseableHttpResponse response = this.http.post(post("/login")
					.setHeader("Content-Type", "application/octet-stream")
					.setEntity(body))) {

			}
		}
	}

	private InputStream xml(String location) {
		return this.getClass().getClassLoader().getResourceAsStream(location);
	}

	private InputStream port(InputStream xml, int port) {
		Queue<Integer> sb = new LinkedList<>();
		return new InputStream() {
			@Override
			public int read() throws IOException {
				if (sb.peek() != null) {
					return sb.poll();
				} else {
					int read = xml.read();
					if (read == '*') {
						sb.addAll(String.valueOf(port)
								.chars().boxed()
								.collect(Collectors.toList()));
						return read();
					}
					return read;
				}
			}
		};
	}

	private class DispatchRecorder extends Dispatcher {
		List<RecordedRequest> requests = new ArrayList<>();
		Pattern REQUEST_PATH = Pattern.compile("/([^\\?]*)(\\?data=(.*))?");
		String secret;

		@Override
		public MockResponse dispatch(RecordedRequest request) throws InterruptedException {
			this.requests.add(request);
			String body = parsePath(request.getPath())
					.map(this.getClass().getClassLoader()::getResourceAsStream)
					.map(this::readFully)
					.map(String::new)
					.orElse("please come again");

			return new MockResponse().setBody(body);
		}

		public void assertNoRequests() {
			assertTrue(this.requests.isEmpty(), "Forged evil-side request");
		}

		public void assertDoesNotHaveSecret() {
			assertNull(this.secret, "Forged evil-side request, exfiltrating the secret");
		}

		private Optional<String> parsePath(String path) {
			Matcher m = REQUEST_PATH.matcher(path);
			if (m.find()) {
				this.secret = m.group(3);
				return Optional.of(m.group(1));
			}
			return Optional.empty();
		}

		private byte[] readFully(InputStream is) {
			try {
				return IOUtils.toByteArray(port(is, evil.getPort()));
			} catch (IOException e) {
				throw new IllegalStateException(e);
			}
		}
	}

	@Test
	public void testJsonDeserializationGadget() throws Exception {
		ObjectMapper o = new ObjectMapper();
		o.enableDefaultTyping(); // scary
		Person in = new Person(new EvilObject(false), Arrays.asList("some", "addresses"));
		byte[] ser = jsonSerialize(in, o);
		System.out.println(new String(ser));
		try {
			Person out = o.readValue(new ByteArrayInputStream(ser), Person.class);
			assertEquals(in.details.getClass(), out.details.getClass());
		} catch (JsonProcessingException e) {
			if (e.getCause() instanceof AssertionError) {
				throw (AssertionError) e.getCause();
			}
			// good thing!
		}
	}

	@Test
	public void testJavaDeserializationGadget() throws Exception {
		Person in = new Person(new EvilObject(false), Arrays.asList("some", "addresses"));
		Field addresses = in.getClass().getDeclaredField("addresses");
		List<EvilObject> evil = Arrays.asList(new EvilObject(false));
		addresses.setAccessible(true);
		addresses.set(in, evil);
		byte[] ser = javaSerialize(in);
		try {
			Person out = javaDeserialize(new ByteArrayInputStream(ser), Person.class);
			assertEquals(in.details.getClass(), out.details.getClass());
		} catch (NotSerializableException e) {
			// good thing!
		}
	}

	private byte[] jsonSerialize(Object obj, ObjectMapper o) throws IOException {
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		o.writeValue(baos, obj);
		return baos.toByteArray();
	}

	private byte[] javaSerialize(Object obj) throws IOException {
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		try (ObjectOutputStream oos = new ObjectOutputStream(baos)) {
			oos.writeObject(obj);
		}
		return baos.toByteArray();
	}
	private <T> T javaDeserialize(InputStream is, Class<T> clazz) throws IOException, ClassNotFoundException {
		try (ObjectInputStream ois = new ObjectInputStream(is)) {
			return (T) ois.readObject();
		}
	}

	private static class Person implements Serializable {
		private List<String> addresses;
		private Object details;

		public Person() {}

		public Person(Object details, List<String> addresses) {
			if (addresses == null || addresses.size() < 2)
				throw new IllegalArgumentException("bad argument");
			this.addresses = new ArrayList<>(addresses);
			this.details = details;
		}

		public List<String> getAddresses() {
			return addresses;
		}

		public Object getDetails() {
			return details;
		}
	}

	@JsonTypeName("employer")
	private static class EmployerDetails implements Serializable {}

	@JsonTypeName("employee")
	private static class EmployeeDetails implements Serializable {}

	@JsonRootName("evil")
	private static class EvilObject implements Serializable {
		public EvilObject() {
			fail("attempted to deserialize EvilObject");
		}

		public EvilObject(boolean avoidException) {
		}

		private void readObject(ObjectInputStream ois) {
			fail("attempted to deserialize EvilObject");
		}
	}
}
