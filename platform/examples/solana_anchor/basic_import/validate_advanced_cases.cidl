cidl: "0.9"
info:
  name: validate_advanced_cases
  title: Validate Advanced Cases
  summary: |-
    The purpose of this CIDL is to validate all the supported advanced cases
    - Verifies the usage of multiple signers
    - Verifies we can specify a rent-payer to an account when initializing
    - Verifies we can specify a rent-receiver to an account when closing it
    - Verifies we can map a signer to an account seed
    - Verifies we can map an input to an account seed
    - Verifies a Non-PDA account can be signer
  version: 0.0.0
  license:
    name: Codigo
    url: https://codigo.ai/documents/Codigo---Terms-of-Service.pdf
solana:
  seeds:
    StaticPDA:
      items:
        - name: "Static Value"
    DynamicPDA:
      items:
        - name: "Static Value"
        - name: dynamic
          type: u8
    PDAWithAllTypes:
      items:
        # Native types
        - name: u8_type
          type: u8
        - name: u16_type
          type: u16
        - name: u32_type
          type: u32
        - name: u64_type
          type: u64
        - name: i8_type
          type: i8
        - name: i16_type
          type: i16
        - name: i32_type
          type: i32
        - name: i64_type
          type: i64
        - name: string_type
          type: string
        # Extended type
        - name: pubkey_type
          type: sol:pubkey
types:
  State:
    fields:
      - name: field_1
        type: u8
methods:
  - name: instruction0_only_method_with_name
  # mutable with 4 signers
  - name: instruction1
    summary: Test `mut` with Non-PDA account and 4 signers
    signers:
      - name: fee_payer
        type: sol:account
        attributes: [ sol:writable ]
      - name: signer_1
        type: sol:account
      - name: signer_2
        type: sol:account
      - name: signer_3
        type: sol:account
    inputs:
      - name: account
        type: sol:account<State>
        attributes: [ sol:writable ]
      - name: input_1
        type: u8
  - name: instruction2
    summary: Test `mut` with PDA account that has one static seed, one field and 4 signers
    signers:
      - name: fee_payer
        type: sol:account
        attributes: [ sol:writable ]
      - name: signer_1
        type: sol:account
      - name: signer_2
        type: sol:account
      - name: signer_3
        type: sol:account
    inputs:
      - name: account
        type: sol:account<State, seeds.StaticPDA>
        attributes: [ sol:writable ]
      - name: input_1
        type: u8
  - name: instruction3
    summary: Test `mut` with PDA account that has one static and dynamic seed, one field and 4 signers
    signers:
      - name: fee_payer
        type: sol:account
        attributes: [ sol:writable ]
      - name: signer_1
        type: sol:account
      - name: signer_2
        type: sol:account
      - name: signer_3
        type: sol:account
    inputs:
      - name: account
        type: sol:account<State, seeds.DynamicPDA>
        attributes: [ sol:writable ]
      - name: input_1
        type: u8
  - name: instruction4
    summary: Test `mut` with PDA account that has one static seed, all the possible dynamic seeds data type, one field and 4 signers
    signers:
      - name: fee_payer
        type: sol:account
        attributes: [ sol:writable ]
      - name: signer_1
        type: sol:account
      - name: signer_2
        type: sol:account
      - name: signer_3
        type: sol:account
    inputs:
      - name: account
        type: sol:account<State, seeds.PDAWithAllTypes>
        attributes: [ sol:writable ]
      - name: input_1
        type: u8
  # immutable with 4 signers
  - name: instruction5
    summary: Test `non-mut` with Non-PDA account and 4 signers
    signers:
      - name: fee_payer
        type: sol:account
        attributes: [ sol:writable ]
      - name: signer_1
        type: sol:account
      - name: signer_2
        type: sol:account
      - name: signer_3
        type: sol:account
    inputs:
      - name: account
        type: sol:account<State>
  - name: instruction6
    summary: Test `non-mut` with PDA account that has one static seed, one field and 4 signers
    signers:
      - name: fee_payer
        type: sol:account
        attributes: [ sol:writable ]
      - name: signer_1
        type: sol:account
      - name: signer_2
        type: sol:account
      - name: signer_3
        type: sol:account
    inputs:
      - name: account
        type: sol:account<State, seeds.StaticPDA>
  - name: instruction7
    summary: Test `non-mut` with PDA account that has one static and dynamic seed, one field and 4 signers
    signers:
      - name: fee_payer
        type: sol:account
        attributes: [ sol:writable ]
      - name: signer_1
        type: sol:account
      - name: signer_2
        type: sol:account
      - name: signer_3
        type: sol:account
    inputs:
      - name: account
        type: sol:account<State, seeds.DynamicPDA>
  - name: instruction8
    summary: Test `non-mut` with PDA account that has one static seed, all the possible dynamic seeds data type, one field and 4 signers
    signers:
      - name: fee_payer
        type: sol:account
        attributes: [ sol:writable ]
      - name: signer_1
        type: sol:account
      - name: signer_2
        type: sol:account
      - name: signer_3
        type: sol:account
    inputs:
      - name: account
        type: sol:account<State, seeds.PDAWithAllTypes>
  # singleton initialization with 4 signers
  - name: instruction9
    summary: Test `init` with Non-PDA account and 4 signers
    signers:
      - name: fee_payer
        type: sol:account
        attributes: [ sol:writable ]
      - name: signer_1
        type: sol:account
      - name: signer_2
        type: sol:account
      - name: signer_3
        type: sol:account
    inputs:
      - name: account
        type: sol:account<State>
        attributes: [ sol:init ]
      - name: input_1
        type: u8
  - name: instruction10
    summary: Test `init` with PDA account that has one static seed, one field and 4 signers
    signers:
      - name: fee_payer
        type: sol:account
        attributes: [ sol:writable ]
      - name: signer_1
        type: sol:account
      - name: signer_2
        type: sol:account
      - name: signer_3
        type: sol:account
    inputs:
      - name: account
        type: sol:account<State, seeds.StaticPDA>
        attributes: [ sol:init ]
      - name: input_1
        type: u8
  - name: instruction11
    summary: Test `init` with PDA account that has one static and dynamic seed, one field and 4 signers
    signers:
      - name: fee_payer
        type: sol:account
        attributes: [ sol:writable ]
      - name: signer_1
        type: sol:account
      - name: signer_2
        type: sol:account
      - name: signer_3
        type: sol:account
    inputs:
      - name: account
        type: sol:account<State, seeds.DynamicPDA>
        attributes: [ sol:init ]
      - name: input_1
        type: u8
  - name: instruction12
    summary: Test `init` with PDA account that has one static seed, all the possible dynamic seeds data type, one field and 4 signers
    signers:
      - name: fee_payer
        type: sol:account
        attributes: [ sol:writable ]
      - name: signer_1
        type: sol:account
      - name: signer_2
        type: sol:account
      - name: signer_3
        type: sol:account
    inputs:
      - name: account
        type: sol:account<State, seeds.PDAWithAllTypes>
        attributes: [ sol:init ]
      - name: input_1
        type: u8
  # non-singleton initialization with 4 signers
  - name: instruction13
    summary: Test `init_if_needed` with Non-PDA account and 4 signers
    signers:
      - name: fee_payer
        type: sol:account
        attributes: [ sol:writable ]
      - name: signer_1
        type: sol:account
      - name: signer_2
        type: sol:account
      - name: signer_3
        type: sol:account
    inputs:
      - name: account
        type: sol:account<State>
        attributes: [ sol:init_if_needed ]
      - name: input_1
        type: u8
  - name: instruction14
    summary: Test `init_if_needed` with PDA account that has one static seed, one field and 4 signers
    signers:
      - name: fee_payer
        type: sol:account
        attributes: [ sol:writable ]
      - name: signer_1
        type: sol:account
      - name: signer_2
        type: sol:account
      - name: signer_3
        type: sol:account
    inputs:
      - name: account
        type: sol:account<State, seeds.StaticPDA>
        attributes: [ sol:init_if_needed ]
      - name: input_1
        type: u8
  - name: instruction15
    summary: Test `init_if_needed` with PDA account that has one static and dynamic seed, one field and 4 signers
    signers:
      - name: fee_payer
        type: sol:account
        attributes: [ sol:writable ]
      - name: signer_1
        type: sol:account
      - name: signer_2
        type: sol:account
      - name: signer_3
        type: sol:account
    inputs:
      - name: account
        type: sol:account<State, seeds.DynamicPDA>
        attributes: [ sol:init_if_needed ]
      - name: input_1
        type: u8
  - name: instruction16
    summary: Test `init_if_needed` with PDA account that has one static seed, all the possible dynamic seeds data type, one field and 4 signers
    signers:
      - name: fee_payer
        type: sol:account
        attributes: [ sol:writable ]
      - name: signer_1
        type: sol:account
      - name: signer_2
        type: sol:account
      - name: signer_3
        type: sol:account
    inputs:
      - name: account
        type: sol:account<State, seeds.PDAWithAllTypes>
        attributes: [ sol:init_if_needed ]
      - name: input_1
        type: u8
  # close accounts with 4 signers
  - name: instruction17
    summary: Test `close_unsafe` with Non-PDA account and 4 signers
    signers:
      - name: fee_payer
        type: sol:account
        attributes: [ sol:writable ]
      - name: signer_1
        type: sol:account
      - name: signer_2
        type: sol:account
      - name: signer_3
        type: sol:account
    inputs:
      - name: account
        type: sol:account<State>
        attributes: [ sol:close_uncheck ]
  - name: safe_instruction17
    summary: Test `close` with Non-PDA account and 4 signers
    signers:
      - name: fee_payer
        type: sol:account
        attributes: [ sol:writable ]
      - name: signer_1
        type: sol:account
      - name: signer_2
        type: sol:account
      - name: signer_3
        type: sol:account
    inputs:
      - name: account
        type: sol:account<State>
        attributes: [ sol:close ]
  - name: instruction18
    summary: Test `close` with PDA account that has one static seed, one field and 4 signers
    signers:
      - name: fee_payer
        type: sol:account
        attributes: [ sol:writable ]
      - name: signer_1
        type: sol:account
      - name: signer_2
        type: sol:account
      - name: signer_3
        type: sol:account
    inputs:
      - name: account
        type: sol:account<State, seeds.StaticPDA>
        attributes: [ sol:close ]
  - name: instruction19
    summary: Test `close` with PDA account that has one static and dynamic seed, one field and 4 signers
    signers:
      - name: fee_payer
        type: sol:account
        attributes: [ sol:writable ]
      - name: signer_1
        type: sol:account
      - name: signer_2
        type: sol:account
      - name: signer_3
        type: sol:account
    inputs:
      - name: account
        type: sol:account<State, seeds.DynamicPDA>
        attributes: [ sol:close ]
  - name: instruction20
    summary: Test `close` with PDA account that has one static seed, all the possible dynamic seeds data type, one field and 4 signers
    signers:
      - name: fee_payer
        type: sol:account
        attributes: [ sol:writable ]
      - name: signer_1
        type: sol:account
      - name: signer_2
        type: sol:account
      - name: signer_3
        type: sol:account
    inputs:
      - name: account
        type: sol:account<State, seeds.PDAWithAllTypes>
        attributes: [ sol:close ]
  # singleton initialization with 4 signers and custom rent-payers
  - name: instruction21
    summary: Test `rent-payer` using `init` with Non-PDA account and 4 signers
    signers:
      - name: fee_payer
        type: sol:account
        attributes: [ sol:writable ]
      - name: signer_1
        type: sol:account
        attributes: [ sol:writable ]
      - name: signer_2
        type: sol:account
      - name: signer_3
        type: sol:account
    inputs:
      - name: account
        type: sol:account<State>
        attributes: [ sol:init, sol:rent-payer=signer_1 ]
      - name: input_1
        type: u8
  - name: instruction22
    summary: Test `rent-payer` using `init` with PDA account that has one static seed, one field and 4 signers
    signers:
      - name: fee_payer
        type: sol:account
        attributes: [ sol:writable ]
      - name: signer_1
        type: sol:account
      - name: signer_2
        type: sol:account
        attributes: [ sol:writable ]
      - name: signer_3
        type: sol:account
    inputs:
      - name: account
        type: sol:account<State, seeds.StaticPDA>
        attributes: [ sol:init, sol:rent-payer=signer_2 ]
      - name: input_1
        type: u8
  - name: instruction23
    summary: Test `rent-payer` using `init` with PDA account that has one static and dynamic seed, one field and 4 signers
    signers:
      - name: fee_payer
        type: sol:account
        attributes: [ sol:writable ]
      - name: signer_1
        type: sol:account
      - name: signer_2
        type: sol:account
      - name: signer_3
        type: sol:account
        attributes: [ sol:writable ]
    inputs:
      - name: account
        type: sol:account<State, seeds.DynamicPDA>
        attributes: [ sol:init, sol:rent-payer=signer_3 ]
      - name: input_1
        type: u8
  - name: instruction24
    summary: Test `rent-payer` using `init` with PDA account that has one static seed, all the possible dynamic seeds data type, one field and 4 signers
    signers:
      - name: fee_payer
        type: sol:account
        attributes: [ sol:writable ]
      - name: signer_1
        type: sol:account
      - name: signer_2
        type: sol:account
      - name: signer_3
        type: sol:account
        attributes: [ sol:writable ]
    inputs:
      - name: account
        type: sol:account<State, seeds.PDAWithAllTypes>
        attributes: [ sol:init, sol:rent-payer=signer_3 ]
      - name: input_1
        type: u8
  # non-singleton initialization with 4 signers and custom rent-payers
  - name: instruction25
    summary: Test `rent-payer` using `init_if_needed` with Non-PDA account and 4 signers
    signers:
      - name: fee_payer
        type: sol:account
        attributes: [ sol:writable ]
      - name: signer_1
        type: sol:account
        attributes: [ sol:writable ]
      - name: signer_2
        type: sol:account
      - name: signer_3
        type: sol:account
    inputs:
      - name: account
        type: sol:account<State>
        attributes: [ sol:init_if_needed, sol:rent-payer=signer_1 ]
      - name: input_1
        type: u8
  - name: instruction26
    summary: Test `rent-payer` using `init_if_needed` with PDA account that has one static seed, one field and 4 signers
    signers:
      - name: fee_payer
        type: sol:account
        attributes: [ sol:writable ]
      - name: signer_1
        type: sol:account
      - name: signer_2
        type: sol:account
        attributes: [ sol:writable ]
      - name: signer_3
        type: sol:account
    inputs:
      - name: account
        type: sol:account<State, seeds.StaticPDA>
        attributes: [ sol:init_if_needed, sol:rent-payer=signer_2 ]
      - name: input_1
        type: u8
  - name: instruction27
    summary: Test `rent-payer` using `init_if_needed` with PDA account that has one static and dynamic seed, one field and 4 signers
    signers:
      - name: fee_payer
        type: sol:account
        attributes: [ sol:writable ]
      - name: signer_1
        type: sol:account
      - name: signer_2
        type: sol:account
      - name: signer_3
        type: sol:account
        attributes: [ sol:writable ]
    inputs:
      - name: account
        type: sol:account<State, seeds.DynamicPDA>
        attributes: [ sol:init_if_needed, sol:rent-payer=signer_3 ]
      - name: input_1
        type: u8
  - name: instruction28
    summary: Test `rent-payer` using `init_if_needed` with PDA account that has one static seed, all the possible dynamic seeds data type, one field and 4 signers
    signers:
      - name: fee_payer
        type: sol:account
        attributes: [ sol:writable ]
      - name: signer_1
        type: sol:account
      - name: signer_2
        type: sol:account
      - name: signer_3
        type: sol:account
        attributes: [ sol:writable ]
    inputs:
      - name: account
        type: sol:account<State, seeds.PDAWithAllTypes>
        attributes: [ sol:init_if_needed, sol:rent-payer=signer_3 ]
      - name: input_1
        type: u8
  # close accounts with 4 signers and rent-receiver
  - name: instruction29
    summary: Test `rent-receiver` with Non-PDA account and 4 signers
    signers:
      - name: fee_payer
        type: sol:account
        attributes: [ sol:writable ]
      - name: signer_1
        type: sol:account
        attributes: [ sol:writable ]
      - name: signer_2
        type: sol:account
      - name: signer_3
        type: sol:account
    inputs:
      - name: account
        type: sol:account<State>
        attributes: [ sol:close_uncheck, sol:rent-receiver=signer_1 ]
  - name: safe_instruction29
    summary: Test `rent-receiver` with Non-PDA account and 4 signers
    signers:
      - name: fee_payer
        type: sol:account
        attributes: [ sol:writable ]
      - name: signer_1
        type: sol:account
        attributes: [ sol:writable ]
      - name: signer_2
        type: sol:account
      - name: signer_3
        type: sol:account
    inputs:
      - name: account
        type: sol:account<State>
        attributes: [ sol:close, sol:rent-receiver=signer_1 ]
  - name: instruction30
    summary: Test `rent-receiver` with PDA account that has one static seed, one field and 4 signers
    signers:
      - name: fee_payer
        type: sol:account
        attributes: [ sol:writable ]
      - name: signer_1
        type: sol:account
      - name: signer_2
        type: sol:account
        attributes: [ sol:writable ]
      - name: signer_3
        type: sol:account
    inputs:
      - name: account
        type: sol:account<State, seeds.StaticPDA>
        attributes: [ sol:close, sol:rent-receiver=signer_2 ]
  - name: instruction31
    summary: Test `rent-receiver` with PDA account that has one static and dynamic seed, one field and 4 signers
    signers:
      - name: fee_payer
        type: sol:account
        attributes: [ sol:writable ]
      - name: signer_1
        type: sol:account
      - name: signer_2
        type: sol:account
      - name: signer_3
        type: sol:account
        attributes: [ sol:writable ]
    inputs:
      - name: account
        type: sol:account<State, seeds.DynamicPDA>
        attributes: [ sol:close, sol:rent-receiver=signer_3 ]
  - name: instruction32
    summary: Test `rent-receiver` with PDA account that has one static seed, all the possible dynamic seeds data type, one field and 4 signers
    signers:
      - name: fee_payer
        type: sol:account
        attributes: [ sol:writable ]
      - name: signer_1
        type: sol:account
      - name: signer_2
        type: sol:account
      - name: signer_3
        type: sol:account
        attributes: [ sol:writable ]
    inputs:
      - name: account
        type: sol:account<State, seeds.PDAWithAllTypes>
        attributes: [ sol:close, sol:rent-receiver=signer_3 ]
  # mapping seeds to signers and input in various scenarios
  - name: instruction33
    summary: Test `non-mut` with PDA account that maps seeds with signers and inputs
    signers:
      - name: fee_payer
        type: sol:account
        attributes: [ sol:writable ]
      - name: signer_1
        type: sol:account
      - name: signer_2
        type: sol:account
      - name: signer_3
        type: sol:account
    inputs:
      - name: account
        type:
          sol:account<State, seeds.PDAWithAllTypes(
          pubkey_type=signer_1,
          u8_type=u8_type,
          u16_type=u16_type,
          u32_type=u32_type,
          u64_type=u64_type,
          i8_type=i8_type,
          i16_type=i16_type,
          i32_type=i32_type,
          i64_type=i64_type,
          string_type=string_type
          )>
      - name: u8_type
        type: u8
      - name: u16_type
        type: u16
      - name: u32_type
        type: u32
      - name: u64_type
        type: u64
      - name: i8_type
        type: i8
      - name: i16_type
        type: i16
      - name: i32_type
        type: i32
      - name: i64_type
        type: i64
      - name: string_type
        type: string
  - name: instruction34
    summary: Test `mut` with PDA account that maps seeds with signers and inputs
    signers:
      - name: fee_payer
        type: sol:account
        attributes: [ sol:writable ]
      - name: signer_1
        type: sol:account
      - name: signer_2
        type: sol:account
      - name: signer_3
        type: sol:account
    inputs:
      - name: account
        type:
          sol:account<State, seeds.PDAWithAllTypes(
          pubkey_type=signer_1,
          u8_type=u8_type,
          u16_type=u16_type,
          u32_type=u32_type,
          u64_type=u64_type,
          i8_type=i8_type,
          i16_type=i16_type,
          i32_type=i32_type,
          i64_type=i64_type,
          string_type=string_type
          )>
        attributes: [ sol:writable ]
      - name: u8_type
        type: u8
      - name: u16_type
        type: u16
      - name: u32_type
        type: u32
      - name: u64_type
        type: u64
      - name: i8_type
        type: i8
      - name: i16_type
        type: i16
      - name: i32_type
        type: i32
      - name: i64_type
        type: i64
      - name: string_type
        type: string
  - name: instruction35
    summary: Test `init` with PDA account that maps seeds with signers and inputs
    signers:
      - name: fee_payer
        type: sol:account
        attributes: [ sol:writable ]
      - name: signer_1
        type: sol:account
      - name: signer_2
        type: sol:account
      - name: signer_3
        type: sol:account
    inputs:
      - name: account
        type:
          sol:account<State, seeds.PDAWithAllTypes(
          pubkey_type=signer_1,
          u8_type=u8_type,
          u16_type=u16_type,
          u32_type=u32_type,
          u64_type=u64_type,
          i8_type=i8_type,
          i16_type=i16_type,
          i32_type=i32_type,
          i64_type=i64_type,
          string_type=string_type
          )>
        attributes: [ sol:init ]
      - name: u8_type
        type: u8
      - name: u16_type
        type: u16
      - name: u32_type
        type: u32
      - name: u64_type
        type: u64
      - name: i8_type
        type: i8
      - name: i16_type
        type: i16
      - name: i32_type
        type: i32
      - name: i64_type
        type: i64
      - name: string_type
        type: string
  - name: instruction36
    summary: Test `init_if_needed` with PDA account that maps seeds with signers and inputs
    signers:
      - name: fee_payer
        type: sol:account
        attributes: [ sol:writable ]
      - name: signer_1
        type: sol:account
      - name: signer_2
        type: sol:account
      - name: signer_3
        type: sol:account
    inputs:
      - name: account
        type:
          sol:account<State, seeds.PDAWithAllTypes(
          pubkey_type=signer_1,
          u8_type=u8_type,
          u16_type=u16_type,
          u32_type=u32_type,
          u64_type=u64_type,
          i8_type=i8_type,
          i16_type=i16_type,
          i32_type=i32_type,
          i64_type=i64_type,
          string_type=string_type
          )>
        attributes: [ sol:init_if_needed ]
      - name: u8_type
        type: u8
      - name: u16_type
        type: u16
      - name: u32_type
        type: u32
      - name: u64_type
        type: u64
      - name: i8_type
        type: i8
      - name: i16_type
        type: i16
      - name: i32_type
        type: i32
      - name: i64_type
        type: i64
      - name: string_type
        type: string
  - name: instruction37
    summary: Test `close` with PDA account that maps seeds with signers and inputs
    signers:
      - name: fee_payer
        type: sol:account
        attributes: [ sol:writable ]
      - name: signer_1
        type: sol:account
      - name: signer_2
        type: sol:account
      - name: signer_3
        type: sol:account
    inputs:
      - name: account
        type:
          sol:account<State, seeds.PDAWithAllTypes(
          pubkey_type=signer_1,
          u8_type=u8_type,
          u16_type=u16_type,
          u32_type=u32_type,
          u64_type=u64_type,
          i8_type=i8_type,
          i16_type=i16_type,
          i32_type=i32_type,
          i64_type=i64_type,
          string_type=string_type
          )>
        attributes: [ sol:close ]
      - name: u8_type
        type: u8
      - name: u16_type
        type: u16
      - name: u32_type
        type: u32
      - name: u64_type
        type: u64
      - name: i8_type
        type: i8
      - name: i16_type
        type: i16
      - name: i32_type
        type: i32
      - name: i64_type
        type: i64
      - name: string_type
        type: string
  # Verifies non-pda account can be signer in various scenarios
  - name: instruction38
    summary: Test `non-mut` Non-PDA account as a signer
    signers:
      - name: fee_payer
        type: sol:account
        attributes: [ sol:writable ]
      - input: signer_1
      - name: signer_2
        type: sol:account
      - name: signer_3
        type: sol:account
    inputs:
      - name: signer_1
        type: sol:account<State>
  - name: instruction39
    summary: Test `mut` Non-PDA account as a signer
    signers:
      - name: fee_payer
        type: sol:account
        attributes: [ sol:writable ]
      - input: signer_1
      - name: signer_2
        type: sol:account
      - name: signer_3
        type: sol:account
    inputs:
      - name: signer_1
        type: sol:account<State>
        attributes: [ sol:writable ]
  - name: instruction40
    summary: Test `init` Non-PDA account as a signer
    signers:
      - name: fee_payer
        type: sol:account
        attributes: [ sol:writable ]
      - input: signer_1
      - name: signer_2
        type: sol:account
      - name: signer_3
        type: sol:account
    inputs:
      - name: signer_1
        type: sol:account<State>
        attributes: [ sol:init ]
  - name: instruction41
    summary: Test `init_if_needed` Non-PDA account as a signer
    signers:
      - name: fee_payer
        type: sol:account
        attributes: [ sol:writable ]
      - input: signer_1
      - name: signer_2
        type: sol:account
      - name: signer_3
        type: sol:account
    inputs:
      - name: signer_1
        type: sol:account<State>
        attributes: [ sol:init_if_needed ]
  - name: instruction42
    summary: Test `close` Non-PDA account as a signer
    signers:
      - name: fee_payer
        type: sol:account
        attributes: [ sol:writable ]
      - input: signer_1
      - name: signer_2
        type: sol:account
      - name: signer_3
        type: sol:account
    inputs:
      - name: signer_1
        type: sol:account<State>
        attributes: [ sol:close_uncheck ]
  - name: safe_instruction42
    summary: Test `close_uncheck` Non-PDA account as a signer
    signers:
      - name: fee_payer
        type: sol:account
        attributes: [ sol:writable ]
      - input: signer_1
      - name: signer_2
        type: sol:account
      - name: signer_3
        type: sol:account
    inputs:
      - name: signer_1
        type: sol:account<State>
        attributes: [ sol:close_uncheck ]