<?php
declare(strict_types=1);
namespace fileupload;

use facadeSchema\ResourceInformation;
use facadeSchema\ResourceType;
use facadeSchema\ResourceURI;
use framework\GenericResponse;
use framework\VulnerabilityDefinitionProvider;
use facadeSchema\VulnerabilityDefinition;
use facadeSchema\VulnerabilityLevelDefinition;
use facadeSchema\Variant;
use facadeSchema\VulnerabilityType;

require __DIR__ . "/FileProperties.php";
require __DIR__ . "/../framework/GenericResponse.php";
require __DIR__ . "/../framework/VulnerabilityDefinitionProvider.php";
require __DIR__ . "/../facadeSchema/VulnerabilityDefinition.php";
require __DIR__ . "/../facadeSchema/VulnerabilityLevelDefinition.php";
require __DIR__ . "/../facadeSchema/Variant.php";
require __DIR__ . "/../facadeSchema/ResourceInformation.php";
require __DIR__ . "/../facadeSchema/ResourceType.php";
require __DIR__ . "/../facadeSchema/ResourceURI.php";
require __DIR__ . "/../facadeSchema/VulnerabilityType.php";

class FileUpload implements VulnerabilityDefinitionProvider
{
    private function get_file_properties(
        string $uploadLocation = "/VulnerableApp-php/images/"
    ) {
        $file_name = $_FILES["file"]["name"];
        $file_size = $_FILES["file"]["size"];
        $file_type = $_FILES["file"]["type"];
        $file_properties = new FileProperties(
            $file_name,
            $file_size,
            $file_type,
            $uploadLocation
        );
        return $file_properties;
    }

    private function sizeValidator(
        FileProperties $file_properties,
        array &$errors
    ) {
        if ($file_properties->get_file_size() > 2097152) {
            array_push($errors, "File size must be excately 2 MB");
        }
    }

    private function mimeTypeValidation(
        FileProperties $file_properties,
        array &$errors
    ) {
        if (substr($file_properties->get_file_type(), 0, 6) !== "image/") {
            array_push($errors, "File mime type should be an image");
        }
    }
    /**
     * Validates that the extension must be present
     */
    private function noExtensionValidator(
        FileProperties $file_properties,
        array &$errors
    ) {
        if (strpos($file_properties->get_file_name(), ".") === false) {
            array_push(
                $errors,
                "extension not present. Please provide extension to the file"
            );
        }
    }

    private function upload(FileProperties $file_properties)
    {
        $file_tmp = $_FILES["file"]["tmp_name"];
        $uploaded_file_uri =
            $file_properties->get_upload_location() .
            $file_properties->get_file_name();
        $file_destination = $_SERVER["DOCUMENT_ROOT"] . $uploaded_file_uri;
        move_uploaded_file($file_tmp, $file_destination);
        return new GenericResponse(true, $uploaded_file_uri, "");
    }

    private function generateResponse(
        FileProperties $file_properties,
        array $errors
    ) {
        if (!empty($errors)) {
            echo json_encode(
                new GenericResponse(
                    false,
                    "",
                    json_encode($errors),
                    JSON_UNESCAPED_SLASHES
                )
            );
        } else {
            echo json_encode(
                $this->upload($file_properties),
                JSON_UNESCAPED_SLASHES
            );
        }
    }

    //Only size validation
    function level1()
    {
        if (isset($_FILES["file"])) {
            $errors = [];
            $file_properties = $this->get_file_properties();
            $this->sizeValidator($file_properties, $errors);
            $this->generateResponse($file_properties, $errors);
        } else {
            echo json_encode(
                new GenericResponse(false, "", "Invalid File Information")
            );
        }
    }

    // Size and mime type validation
    function level2()
    {
        if (isset($_FILES["file"])) {
            $errors = [];
            $file_properties = $this->get_file_properties();
            $this->sizeValidator($file_properties, $errors);
            $this->mimeTypeValidation($file_properties, $errors);
            $this->generateResponse($file_properties, $errors);
        } else {
            echo json_encode(
                new GenericResponse(false, "", "Invalid File Information")
            );
        }
    }

    // Deny list of htmls and case sensitive php
    function level3()
    {
        if (isset($_FILES["file"])) {
            $errors = [];
            $file_properties = $this->get_file_properties();
            $this->sizeValidator($file_properties, $errors);
            $denyList = ["html", "xhtml", "htm", "shtml", "svg", "dhtml"];
            $tmp = explode(".", $_FILES["file"]["name"]);
            $file_ext = strtolower(end($tmp));
            $this->noExtensionValidator($file_properties, $errors);
            //Extra check for php in order to make a specific test for case sensitive check
            if (in_array($file_ext, $denyList) || "php" === end($tmp)) {
                array_push(
                    $errors,
                    "extension " .
                        $file_ext .
                        " not allowed, please choose a JPEG or PNG file."
                );
            }
            $this->generateResponse($file_properties, $errors);
        } else {
            echo json_encode(
                new GenericResponse(false, "", "Invalid File Information")
            );
        }
    }

    // Deny list and case insensitive check
    function level4()
    {
        if (isset($_FILES["file"])) {
            $errors = [];
            $file_properties = $this->get_file_properties();
            $this->sizeValidator($file_properties, $errors);
            $denyList = [
                "php",
                "html",
                "xhtml",
                "htm",
                "shtml",
                "svg",
                "dhtml",
            ];
            $tmp = explode(".", $_FILES["file"]["name"]);
            $file_ext = strtolower(end($tmp));
            $this->noExtensionValidator($file_properties, $errors);
            if (in_array($file_ext, $denyList)) {
                array_push(
                    $errors,
                    "extension " .
                        $file_ext .
                        " not allowed, please choose a JPEG or PNG file."
                );
            }
            $this->generateResponse($file_properties, $errors);
        } else {
            echo json_encode(
                new GenericResponse(false, "", "Invalid File Information")
            );
        }
    }
    //Deny list with all the php variants, case insensitive
    function level5()
    {
        if (isset($_FILES["file"])) {
            $errors = [];
            $file_properties = $this->get_file_properties();
            $this->sizeValidator($file_properties, $errors);
            $denyList = [
                "php",
                "php3",
                "php4",
                "php5",
                "html",
                "xhtml",
                "htm",
                "shtml",
                "svg",
                "dhtml",
            ];
            $tmp = explode(".", $_FILES["file"]["name"]);
            $file_ext = strtolower(end($tmp));
            $this->noExtensionValidator($file_properties, $errors);
            if (in_array($file_ext, $denyList)) {
                array_push(
                    $errors,
                    "extension " .
                        $file_ext .
                        " not allowed, please choose a JPEG or PNG file."
                );
            }
            $this->generateResponse($file_properties, $errors);
        } else {
            echo json_encode(
                new GenericResponse(false, "", "Invalid File Information")
            );
        }
    }

    // Deny list with more php variants and case insensitive
    // can use .htaccess file and then upload variants
    function level6()
    {
        if (isset($_FILES["file"])) {
            $errors = [];
            $file_properties = $this->get_file_properties();
            $this->sizeValidator($file_properties, $errors);
            $denyList = [
                "php",
                "php3",
                "php4",
                "php5",
                "phtml",
                "phtm",
                "html",
                "xhtml",
                "htm",
                "shtml",
                "svg",
                "dhtml",
            ];
            $tmp = explode(".", $_FILES["file"]["name"]);
            $file_ext = strtolower(end($tmp));
            $this->noExtensionValidator($file_properties, $errors);
            if (in_array($file_ext, $denyList)) {
                array_push(
                    $errors,
                    "extension " .
                        $file_ext .
                        " not allowed, please choose a JPEG or PNG file."
                );
            }
            $this->generateResponse($file_properties, $errors);
        } else {
            echo json_encode(
                new GenericResponse(false, "", "Invalid File Information")
            );
        }
    }

    //Whitelisting
    //Double Extension attack
    function level7()
    {
        if (isset($_FILES["file"])) {
            $errors = [];
            $file_properties = $this->get_file_properties();
            $extensions = ["jpeg", "jpg", "png"];
            $this->sizeValidator($file_properties, $errors);
            $tmp = explode(".", $_FILES["file"]["name"]);
            $this->noExtensionValidator($file_properties, $errors);
            $file_ext = strtolower($tmp[1]);
            if (!in_array($file_ext, $extensions)) {
                array_push(
                    $errors,
                    "extension not allowed, please choose a JPEG or PNG file."
                );
            }

            $this->generateResponse($file_properties, $errors);
        } else {
            echo json_encode(
                new GenericResponse(false, "", "Invalid File Information")
            );
        }
    }

    //Double extension: php.jpg
    function level8()
    {
        if (isset($_FILES["file"])) {
            $errors = [];
            $file_properties = $this->get_file_properties(
                "/VulnerableApp-php/images/specialimages/"
            );
            $extensions = ["jpeg", "jpg", "png"];
            $this->sizeValidator($file_properties, $errors);
            $tmp = explode(".", $_FILES["file"]["name"]);
            $file_ext = strtolower(end($tmp));
            $this->noExtensionValidator($file_properties, $errors);
            if (!in_array($file_ext, $extensions)) {
                array_push(
                    $errors,
                    "extension not allowed, please choose a JPEG or PNG file."
                );
            }
            $this->generateResponse($file_properties, $errors);
        } else {
            echo json_encode(
                new GenericResponse(false, "", "Invalid File Information")
            );
        }
    }

    //image size based check
    function level9()
    {
        if (isset($_FILES["file"])) {
            $errors = [];
            $file_properties = $this->get_file_properties(
                "/VulnerableApp-php/images/"
            );
            $this->sizeValidator($file_properties, $errors);
            $this->noExtensionValidator($file_properties, $errors);
            if (!getimagesize($_FILES["file"]["tmp_name"])) {
                array_push($errors, "Provided file is not an image file.");
            }
            $this->generateResponse($file_properties, $errors);
        } else {
            echo json_encode(
                new GenericResponse(false, "", "Invalid File Information")
            );
        }
    }

    //htaccess file upload is allowed
    function level10()
    {
        if (isset($_FILES["file"])) {
            $errors = [];
            $file_properties = $this->get_file_properties();
            $extensions = ["jpeg", "jpg", "png", "htaccess"];
            $this->sizeValidator($file_properties, $errors);
            $this->noExtensionValidator($file_properties, $errors);
            $tmp = explode(".", $_FILES["file"]["name"]);
            $file_ext = strtolower(end($tmp));
            if (!in_array($file_ext, $extensions)) {
                array_push(
                    $errors,
                    "extension not allowed, please choose a JPEG or PNG file."
                );
            }
            $this->generateResponse($file_properties, $errors);
        } else {
            echo json_encode(
                new GenericResponse(false, "", "Invalid File Information")
            );
        }
    }

    // Vulnerable to XSS without extension. If file name is png and file contains html then it causes xss
    function level11()
    {
        if (isset($_FILES["file"])) {
            $errors = [];
            $file_properties = $this->get_file_properties();
            $extensions = ["jpeg", "jpg", "png"];
            $this->sizeValidator($file_properties, $errors);
            $tmp = explode(".", $_FILES["file"]["name"]);
            $file_ext = strtolower(end($tmp));
            if (!in_array($file_ext, $extensions)) {
                array_push(
                    $errors,
                    "extension not allowed, please choose a JPEG or PNG file."
                );
            }
            $this->generateResponse($file_properties, $errors);
        } else {
            echo json_encode(
                new GenericResponse(false, "", "Invalid File Information")
            );
        }
    }

    // Secure implementation
    function level12()
    {
        if (isset($_FILES["file"])) {
            $errors = [];
            $file_properties = $this->get_file_properties();
            $extensions = ["jpeg", "jpg", "png"];
            $this->sizeValidator($file_properties, $errors);
            $this->noExtensionValidator($file_properties, $errors);
            $tmp = explode(".", $_FILES["file"]["name"]);
            $file_ext = strtolower(end($tmp));
            if (!in_array($file_ext, $extensions)) {
                array_push(
                    $errors,
                    "extension not allowed, please choose a JPEG or PNG file."
                );
            }
            $this->generateResponse($file_properties, $errors);
        } else {
            echo json_encode(
                new GenericResponse(false, "", "Invalid File Information")
            );
        }
    }

    function getVulnerabilityDefinition(): VulnerabilityDefinition
    {
        $vulnerabilityDefinition = new VulnerabilityDefinition();
        $vulnerabilityDefinition->set_id("FileUpload");
        $vulnerabilityDefinition->set_name("FileUpload");
        $messages = parse_ini_file(
            $_SERVER["DOCUMENT_ROOT"] .
                "/VulnerableApp-php/resources/i18n/messages.ini"
        );
        $vulnerabilityDefinition->set_description(
            $messages["FILE_UPLOAD_VULNERABILITY_DEFINITION"]
        );
        $vulnerabilityType = new VulnerabilityType(
            "CUSTOM",
            "Unrestricted File Upload"
        );
        $vulnerabilityDefinition->set_vulnerability_types([$vulnerabilityType]);

        $htmlResourceUri = new ResourceURI(
            false,
            "VulnerableApp-php/templates/FileUploadVulnerability/LEVEL_1/FileUpload.html",
            ResourceType::HTML
        );
        $jsResourceUri = new ResourceURI(
            false,
            "VulnerableApp-php/templates/FileUploadVulnerability/LEVEL_1/FileUpload.js",
            ResourceType::JAVASCRIPT
        );
        $cssResourceUri = new ResourceURI(
            false,
            "VulnerableApp-php/templates/FileUploadVulnerability/LEVEL_1/FileUpload.css",
            ResourceType::CSS
        );
        $resourceInformation = new ResourceInformation();
        $resourceInformation->set_html_resource($htmlResourceUri);
        $resourceInformation->add_static_resources($jsResourceUri);
        $resourceInformation->add_static_resources($cssResourceUri);

        $levels = [
            "LEVEL_1",
            "LEVEL_2",
            "LEVEL_3",
            "LEVEL_4",
            "LEVEL_5",
            "LEVEL_6",
            "LEVEL_7",
            "LEVEL_8",
            "LEVEL_9",
            "LEVEL_10",
            "LEVEL_11",
            "LEVEL_12",
        ];
        foreach ($levels as $level) {
            $vulnerabilityLevel = new VulnerabilityLevelDefinition();
            $vulnerabilityLevel->set_level($level);
            if ($level === "LEVEL_12") {
                $vulnerabilityLevel->set_variant(Variant::SECURE);
            } else {
                $vulnerabilityLevel->set_variant(Variant::UNSECURE);
            }
            $vulnerabilityLevel->set_resource_information($resourceInformation);
            $vulnerabilityDefinition->add_level_definition($vulnerabilityLevel);
        }
        return $vulnerabilityDefinition;
    }
}
?>
