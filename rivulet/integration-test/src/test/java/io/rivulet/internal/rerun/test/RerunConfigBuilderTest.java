package io.rivulet.internal.rerun.test;

import io.rivulet.internal.fuzz.generator.OgnlInjectionGenerator;
import io.rivulet.internal.rerun.Replacement;
import io.rivulet.internal.rerun.ReplacementImplBuilder;
import io.rivulet.internal.rerun.RerunConfigBuilder;
import io.rivulet.internal.rerun.TestRerunConfiguration;
import org.junit.Test;

import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;

import static junit.framework.TestCase.assertEquals;

/* Tests the behavior of RerunConfigBuilder. */
public class RerunConfigBuilderTest {

    /* Checks a RerunConfigBuilder generates all valid combinations of the replacements generated by its builders. */
    @Test
    public void testBuildsAllCombinations() {
        ReplacementImplBuilder builder1 = new ReplacementImplBuilder()
                .value("value")
                .required(true)
                .isPayload(true);
        ReplacementImplBuilder builder2 = new ReplacementImplBuilder()
                .value("value")
                .baseSource(ViolationTestUtils.SAMPLE_BASE_SOURCE1)
                .isPayload(false);
        RerunConfigBuilder configBuilder = new RerunConfigBuilder()
                .autoTainterClass(OgnlInjectionGenerator.class)
                .addReplacementBuilder(builder1)
                .addReplacementBuilder(builder2);
        List<TestRerunConfiguration> configs = configBuilder.build(ViolationTestUtils.sampleViolation3);
        // Check the basic information of the generated configurations
        HashSet<String> expectedUIDS = new HashSet<>();
        expectedUIDS.add(ViolationTestUtils.sampleViolation3.getUniqueID());
        for(TestRerunConfiguration config : configs) {
            assertEquals(OgnlInjectionGenerator.class, config.getAutoTainterClass());
            assertEquals(ViolationTestUtils.sampleViolation3.getTestClass(), config.getTestClass());
            assertEquals(ViolationTestUtils.sampleViolation3.getTestMethod(), config.getTestMethod());
            assertEquals(expectedUIDS, config.getViolationUIDs());
        }
        // Check the replacements of the generated configurations
        LinkedHashSet<Replacement> builder1Replacements = builder1.build(ViolationTestUtils.sampleViolation3);
        LinkedHashSet<Replacement> builder2Replacements = builder2.build(ViolationTestUtils.sampleViolation3);
        HashSet<HashSet<Replacement>> expected = new HashSet<>();
        for(Replacement r1 : builder1Replacements) {
            for(Replacement r2 : builder2Replacements) {
                HashSet<Replacement> pair = new HashSet<>();
                pair.add(r1);
                pair.add(r2);
                expected.add(pair);
            }
        }
        HashSet<HashSet<Replacement>> actual = new HashSet<>();
        for(TestRerunConfiguration config : configs) {
            actual.add(new HashSet<>(config.getReplacementsCopy()));
        }
        assertEquals(expected, actual);
    }
}
