package io.rivulet.internal.statistics;

import edu.columbia.cs.psl.phosphor.runtime.MultiTainter;
import edu.columbia.cs.psl.phosphor.runtime.Taint;
import io.rivulet.internal.RivuletAutoTaintWrapper;
import io.rivulet.internal.TaintedSinkValueSet;
import io.rivulet.internal.Violation;
import io.rivulet.internal.fuzz.generator.RerunGeneratorWrapper;
import io.rivulet.internal.fuzz.generator.XssGenerator;
import io.rivulet.internal.rerun.TestRerunConfiguration;
import io.rivulet.internal.rerun.test.GenerateRerunsBaseTest;
import io.rivulet.internal.rerun.test.ViolationTestUtils;
import org.apache.commons.lang3.StringEscapeUtils;
import org.apache.commons.lang3.tuple.ImmutablePair;
import org.apache.commons.lang3.tuple.Pair;
import org.junit.Test;

import java.util.*;

import static io.rivulet.internal.fuzz.generator.XssGenerator.EVENT_HANDLER_ATTRIBUTES;

public class NaiveComparisonStatisticsTest {

    // Auto-tainter instance used to check original run for violations
    private static final RivuletAutoTaintWrapper autoTainter = new RivuletAutoTaintWrapper();
    // Generator used to generate rerun builders and check String for critical violations
    private static final RerunGeneratorWrapper generator = new XssGenerator();
    // A base sink target by the generator
    private static final String baseSink = generator.getTargetedBaseSinks().get(0);
    // Sanitizers considered
    private static final List<GenerateRerunsBaseTest.Sanitizer> htmlSanitizers = new LinkedList<>(Arrays.asList(
            input -> input.replaceAll("<script>", ""), // Bad script tag replacement featured in Juliet benchmarks
            input -> input.replaceAll("[=|,]", ""), // No equals or comma - tomcat cookies
            input -> Arrays.asList(EVENT_HANDLER_ATTRIBUTES).contains(input) ? "" : input, // No event handler attribute names
            input -> input.toLowerCase().contains("script") ? "" : input, // No usages of script
            StringEscapeUtils::escapeHtml4, // HTML escape
            input -> input.replaceAll("[<>]", ""), // Remove angle brackets
            input -> input.replaceAll("[\"'`]", ""), // No quoting
            null // No sanitizing
    ));
    // Non-malicious original tainted String put into the template
    private static final String ORIGINAL_VALUE = "hello";

    @Test
    public void evaluateHtmlContexts() {
        // Replacements generated by XssGenerator that passed in some context with some sanitizer
        LinkedHashSet<String> passingReplacements = new LinkedHashSet<>();
        // Combinations of templates and sanitizers for which XssGenerator generates at least one successful replacement
        LinkedHashSet<Pair<String, GenerateRerunsBaseTest.Sanitizer>> passingTemplateSanitizerPairs = new LinkedHashSet<>();
        // Combinations of templates and sanitizers for which XssGenerator generates no successful replacements
        LinkedHashSet<Pair<String, GenerateRerunsBaseTest.Sanitizer>> failingTemplateSanitizerPairs = new LinkedHashSet<>();
        // Set of unique templates
        LinkedHashSet<String> subcontexts = new LinkedHashSet<>();
        for(HtmlContext context : HtmlContext.values()) {
            for(String template : context.exampleTemplates) {
                subcontexts.add(template);
                for(GenerateRerunsBaseTest.Sanitizer sanitizer : htmlSanitizers) {
                    boolean passedCombo = false;
                    for(String replacement : generateReplacementValues(template)) {
                        if(testReplacement(template, replacement, sanitizer)) {
                            passedCombo = true;
                            passingReplacements.add(replacement);
                        }
                    }
                    if(passedCombo) {
                        passingTemplateSanitizerPairs.add(new ImmutablePair<>(template, sanitizer));
                    } else {
                        failingTemplateSanitizerPairs.add(new ImmutablePair<>(template, sanitizer));
                    }
                }
            }
        }
        int i = 1;
        for(String r : passingReplacements) {
            System.out.println((i++) + ".\t" + r);
        }
        System.out.println("Unique replacements: " + passingReplacements.size());
        System.out.println("Unique contexts: " + HtmlContext.values().length);
        System.out.println("Unique subcontexts: " + subcontexts.size());
        System.out.println("Sanitizers: " + htmlSanitizers.size());
        System.out.println("Passing template-sanitizer pairs: " + passingTemplateSanitizerPairs.size());
        System.out.println("Failing template-sanitizer pairs: " + failingTemplateSanitizerPairs.size());
    }

    /* Returns whether the specified replacement is successful. */
    private static boolean testReplacement(String template, String replacement, GenerateRerunsBaseTest.Sanitizer sanitizer) {
        replacement = sanitizer == null ? replacement : sanitizer.sanitize(replacement);
        MultiTainter.taintedObject(replacement, new Taint<>(ViolationTestUtils.SAMPLE_LABEL1));
        String result = String.format(template, replacement);
        // The generator check the String
        Violation violation = new Violation(baseSink, baseSink);
        generator.checkTaint(result, 0, violation);
        return !violation.getTaintedValues().isEmpty();
    }

    /* Generates replacement values for the specified template. */
    private static LinkedList<String> generateReplacementValues(String template) {
        MultiTainter.taintedObject(ORIGINAL_VALUE, new Taint<>(ViolationTestUtils.SAMPLE_LABEL1));
        String original = String.format(template, ORIGINAL_VALUE);
        // Get the violation that could be reported from an original test run
        Violation violation = new Violation(baseSink, baseSink);
        autoTainter.checkTaint(original, 0, violation);
        violation = TaintedSinkValueSet.processViolation(violation);
        // Gather replacement values
        LinkedList<String> replacementValues = new LinkedList<>();
        for(TestRerunConfiguration config : generator.generateReruns(violation, null, new Object[]{original})) {
            replacementValues.add(config.getReplacementValue(ORIGINAL_VALUE, ViolationTestUtils.SAMPLE_LABEL1));
        }
        return replacementValues;
    }

    private enum HtmlContext {
        CONTENT_STYLE("Tainted value appears in the inner content of a 'style' tag.", "<style> %s </style>"),
        CONTENT_TEXTAREA("Tainted value appears in the inner content of a 'textarea' tag.", "<textarea> %s </textarea>"),
        CONTENT_TITLE("Tainted value appears in the inner content of a 'title' tag.", "<title> %s </title>"),
        CONTENT_OTHER("Tainted value appears in the inner content of a tag other than 'style', 'textarea', 'title', or 'script.",
                "<body><div> %s </div></body>"),
        CONTENT_SCRIPT("Tainted value appears in the inner content of a 'script' tag and is not javascript quoted or commented.",
                "<script> %s </script>"),
        CONTENT_SCRIPT_SINGLE_QUOTED("Tainted value appears in the inner content of a 'script' tag and is single quoted.",
                "<script> var x = '%s'; </script>"),
        CONTENT_SCRIPT_DOUBLE_QUOTED("Tainted value appears in the inner content of a 'script' tag and is double quoted.",
                "<script> var x = \"%s\"; </script>"),
        CONTENT_SCRIPT_BACKTICK_QUOTED("Tainted value appears in the inner content of a 'script' tag and is backtick quoted.",
                "<script> var x = `%s`; </script>"),
        CONTENT_SCRIPT_SINGLE_LINE_COMMENTED("Tainted value appears in the inner content of a 'script' tag and is single line commented",
                "<script> var x = 2; // %s </script>"),
        CONTENT_SCRIPT_MULTILINE_COMMENTED("Tainted value appears in the inner content of a 'script' tag and is multiline commented",
                "<script> var x = 2; /* %s */ </script>"),
        TAG_NAME("Tainted value is a tag name.", "<%s />"),
        ATTRIBUTE_KEY_SCRIPT("Tainted value is an attribute key for a tag that has an attribute vulnerable to script attacks.",
                "<a %s=example></a>",
                "<body %s=example></body>",
                "<button %s=example></button>",
                "<form %s=example></form>",
                "<img %s=example>",
                "<object %s=example></object>"
        ),
        ATTRIBUTE_KEY_URL("Tainted value is an attribute key for a tag that has an attribute vulnerable to URL attacks.",
                "<base %s=example>",
                "<form %s=example></form>",
                "<object %s=example></object>",
                "<script %s=example></script>"
        ),
        ATTRIBUTE_KEY_OTHER("Tainted value is an attribute key for a tag that doesn't have any unique vulnerable attributes.",
                makeAttributeValueTemplates("")),
        ATTRIBUTE_VALUE_OTHER_UNQUOTED("Tainted value is in an unquoted attribute value for an attribute that is not vulnerable " +
                "to URL or script attacks.", makeAttributeValueTemplates("")),
        ATTRIBUTE_VALUE_OTHER_DOUBLE_QUOTED("Tainted value is in a double quoted attribute value for an attribute that is " +
                "not vulnerable to URL or script attacks.", makeAttributeValueTemplates("\"")),
        ATTRIBUTE_VALUE_OTHER_SINGLE_QUOTED("Tainted value is in a single quoted attribute value for an attribute that is " +
                "not vulnerable to URL or script attacks.", makeAttributeValueTemplates("'")),
        ATTRIBUTE_VALUE_BEGINNING__URL("Tainted value is at the start of an attribute value for an attribute that " +
                "is vulnerable to URL attacks.", "<script src=%s></script>"),
        ATTRIBUTE_VALUE_BEGINNING_SCRIPT("Tainted value is at the start of an attribute value for an attribute that " +
                "is vulnerable to script attacks.", "\"<img src=%s>\""),
        JAVASCRIPT_ATTRIBUTE_VALUE("Tainted value is in an attribute value that is treated like javascript, i.e. either " +
                "an event handler attribute or an attribute vulnerable to script injections after 'javascript:', and is unquoted and" +
                "uncommented in the javascript.",
                "<img src='javascript:var x = %s;'>"),
        JAVASCRIPT_ATTRIBUTE_VALUE_SINGLE_QUOTED("Tainted value is in an attribute value that is treated like javascript, i.e. either " +
                "an event handler attribute or an attribute vulnerable to script injections after 'javascript:', and is " +
                "single quoted in the javascript.",
                "<img src=\"javascript:var x = '%s';\">"),
        JAVASCRIPT_ATTRIBUTE_VALUE_DOUBLE_QUOTED("Tainted value is in an attribute value that is treated like javascript, i.e. either " +
                "an event handler attribute or an attribute vulnerable to script injections after 'javascript:', and is " +
                "double quoted in the javascript.",
                "<img src='javascript:var x = \"%s\";'>"),
        JAVASCRIPT_ATTRIBUTE_VALUE_BACKTICK_QUOTED("Tainted value is in an attribute value that is treated like javascript, i.e. either " +
                "an event handler attribute or an attribute vulnerable to script injections after 'javascript:', and is " +
                "backtick quoted in the javascript.",
                "<img src='javascript:var x = `%s`;'>"),
        JAVASCRIPT_ATTRIBUTE_VALUE_SINGLE_LINE_COMMENTED("Tainted value is in an attribute value that is treated like javascript, i.e. either " +
                "an event handler attribute or an attribute vulnerable to script injections after 'javascript:', and is " +
                "single line commented in the javascript.",
                "<img src='javascript:var x = 2; // %s'>"),
        JAVASCRIPT_ATTRIBUTE_VALUE_MULTILINE_COMMENTED("Tainted value is in an attribute value that is treated like javascript, i.e. either " +
                "an event handler attribute or an attribute vulnerable to script injections after 'javascript:', and is " +
                "multiline commented in the javascript.",
                "<img src='javascript:var x = 2; /* %s */'>");

        private static String[] makeAttributeValueTemplates(String valueQuoting) {
            String[] baseTemplates = new String[]{
                    "<a href=%s%s%s></a>",
                    "<body background=%s%s%s></body>",
                    "<button formaction=%s%s%s></button>",
                    "<img src=%s%s%s>",
                    "<base href=%s%s%s>",
                    "<form action=%s%s%s></form>",
                    "<object data=%s%s%s></object>",
                    "<script src=%s%s%s></script>",
                    "<div id=%s%s%s> TEXT </div>"
            };
            String[] templates = new String[baseTemplates.length];
            int i = 0;
            for(String baseTemplate : baseTemplates) {
                templates[i++] = String.format(baseTemplate, valueQuoting, "%s", valueQuoting);
            }
            return templates;
        }

        // Description of the context
        private final String desc;
        // Examples of templates for the non-tainted portion of the context
        private final String[] exampleTemplates;

        HtmlContext(String desc, String... exampleTemplates) {
            this.desc = desc;
            this.exampleTemplates = exampleTemplates;
        }
    }
}
